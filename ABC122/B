
You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.

Here, a ACGT string is a string that contains no characters other than A, C, G and T.
------------------------------------------------------------------------------

把字符串用""分割成一个字符串数组，这样就可以用for循环遍历了。
注意else的使用，else里面不能进行判断比大小，比大小应当放在外面。
看看还有没有其他算法



import java.util.*;

public class test{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        String[] S = sc.next().split("");
        int sum = 0;
        int max = 0;
        for(int i = 0; i < S.length; i++){
            if(S[i].equals("A")||S[i].equals("T")||S[i].equals("C")||S[i].equals("G")){
                sum++;
            }
            else{
                sum = 0;
            }
            max = Math.max(sum, max);
        }
        System.out.println(max);
    }
}


我之前的想法 双循环 一个i-i+1，一个i+1-n，计数 也可以
import java.util.*;
 
public class Main {
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        // String S = "ATCODER";
        int n = S.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (S.substring(i, i+1).equals("A") | S.substring(i, i+1).equals("C") | S.substring(i, i+1).equals("G") | S.substring(i, i+1).equals("T")) {
                int temp = 1;
                // System.out.println("i: " + S.substring(i, i+1));
                for (int j = i+1; j < n; j++) {
                    if (S.substring(j, j+1).equals("A") | S.substring(j, j+1).equals("C") | S.substring(j, j+1).equals("G") | S.substring(j, j+1).equals("T")) {
                        // System.out.println("j: " + S.substring(j, j+1));
                        temp++;
                    } else {
                        break;
                    }
                }
                if (temp > ans) {
                    ans = temp;
                }
            }
        }
        System.out.println(ans);
    }
 
}
时间复杂度高一些。
